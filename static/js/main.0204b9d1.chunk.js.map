{"version":3,"sources":["components/getMergeSortAnimation.js","components/getBubbleSortAnimations.js","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","eidx","sweap","console","log","bubbleSortHelper","idx1","idx2","temp","Home","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","arrayLength","col","barOneHeight","barTwoHeight","barOne","barTwo","clearTimeout","className","map","value","idx","key","onClick","mergeSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECLJ,SAASgB,EAAwBjB,GACpC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EACPA,EAAMI,QAE7B,OAEJ,SACIE,EACAC,EACAC,EACAL,EACAF,GAGA,IADA,IAAMiB,EAAOV,EACLK,EAAI,EAAGA,EAAIK,IAAQL,EACvB,IAAI,IAAIC,EAAI,EAAGA,EAAII,EAAKL,IAAKC,EACzBb,EAAWc,KAAK,CAACD,EAAGA,EAAE,EAAE,EAAER,EAAUQ,GAAGR,EAAUQ,EAAE,KAChDR,EAAUQ,GAAKR,EAAUQ,EAAE,IAC1Bb,EAAWc,KAAK,CAACD,EAAGA,EAAE,EAAE,EAAER,EAAUQ,GAAGR,EAAUQ,EAAE,KACnDK,EAAMb,EAAUQ,EAAEA,EAAE,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,EAAE,EAAE,EAAER,EAAUQ,EAAE,GAAGR,EAAUQ,KAK/DM,QAAQC,IAAIf,GAxBZgB,CAAiBtB,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACtDA,EAyBX,SAASkB,EACLb,EACAiB,EACAC,GAEA,IAAIC,EAAOnB,EAAUiB,GACrBjB,EAAUiB,GAAQjB,EAAUkB,GAC5BlB,EAAUkB,GAAQC,EC5BtB,IAYaC,EAAb,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACT5B,MAAO,IAHG,EADtB,gEASQ6B,KAAKC,eATb,mCAeI,IADA,IAqG2BC,EAAKC,EArG1BhC,EAAQ,GACNa,EAAI,EAAGA,EAAI,MAAOA,EACtBb,EAAMe,MAmGiBgB,EAnGU,GAmGLC,EAnGQ,IAqGjCtB,KAAKC,MAAMD,KAAKuB,UAAYD,EAAMD,EAAM,GAAKA,KAnGpDF,KAAKK,SAAS,CAAClC,YAlBnB,2GA8BI,IADA,IAAMC,EAAaF,EAAuB8B,KAAKD,MAAM5B,OAF9C,WAGEa,GACP,IAAMsB,EAAYC,SAASC,uBAAuB,aAElD,GADsBxB,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACVyB,EADU,KACCC,EADD,KAEXC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQ9B,EAAI,IAAM,EAvCR,SAHF,OA4Cd+B,YAAW,WACTxB,QAAQC,IAAI,iBACZmB,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAtDb,EAuDhB9B,QAEH+B,YAAW,WAAM,kBAEgB3C,EAAWY,GAF3B,GAERyB,EAFQ,KAEGQ,EAFH,KAGKX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QA7DiB,EA8DhBjC,IApBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,KA9Bb,mCA0DE,IAFA,IAAMZ,EAAagB,EAAwBY,KAAKD,MAAM5B,OAChDgD,EAAc/C,EAAWC,OAFrB,WAGFW,GAHE,kBAIoDZ,EAAWY,GAJ/D,GAIDyB,EAJC,KAISC,EAJT,KAImBU,EAJnB,KAIuBC,EAJvB,KAIoCC,EAJpC,KAKFhB,EAAYC,SAASC,uBAAuB,aAC5Ce,EAASjB,EAAUG,GAAWG,MAC9BY,EAASlB,EAAUI,GAAWE,MACzB,IAARQ,GACDL,YAAW,WACTQ,EAAOP,gBAnES,SAoEhBQ,EAAOR,gBApES,WAVG,EA+ElBhC,GACHyC,gBAGAV,YAAW,WACTQ,EAAOP,gBA7EO,OA8EdQ,EAAOR,gBA9EO,OA+EdO,EAAOL,OAAP,UAAmBI,EAAnB,MACAE,EAAON,OAAP,UAAmBG,EAAnB,QAvFmB,EAwFlBrC,IAlBCA,EAAI,EAAGA,EAAImC,IAAenC,EAAG,EAA7BA,KA1DV,gFAsFa,IAAD,OACGb,EAAS6B,KAAKD,MAAd5B,MACP,OACI,yBAAKuD,UAAU,mBACfvD,EAAMwD,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAKH,UAAU,YAAYI,IAAKD,EACnCjB,MACI,CACII,gBAnGM,OAmGyBE,OAAO,GAAD,OAAKU,EAAL,YAO1C,6BACA,4BAAQG,QAAS,kBAAM,EAAK9B,eAA5B,sBACH,4BAAQ8B,QAAS,kBAAM,EAAKC,cAA5B,cAGA,4BAAQD,QAAS,kBAAM,EAAKE,eAA5B,oBA1GR,GAA0BC,IAAMC,W,MCTjBC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.0204b9d1.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  ","export function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    bubbleSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\nfunction bubbleSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n){\r\n    const eidx = endIdx;\r\n    for(let i = 0; i < eidx; ++i){\r\n        for(let j = 0; j < eidx-i; ++j){\r\n            animations.push([j, j+1,0,mainArray[j],mainArray[j+1]]);\r\n            if(mainArray[j] > mainArray[j+1]){\r\n                animations.push([j, j+1,1,mainArray[j],mainArray[j+1]]);\r\n                sweap(mainArray,j,j+1);\r\n            }\r\n            else{\r\n                animations.push([j, j+1,1,mainArray[j+1],mainArray[j]]);\r\n            }\r\n        }   \r\n    }\r\n\r\n    console.log(mainArray);\r\n}\r\nfunction sweap(\r\n    mainArray,\r\n    idx1,\r\n    idx2\r\n){\r\n    let temp = mainArray[idx1];\r\n    mainArray[idx1] = mainArray[idx2];\r\n    mainArray[idx2] = temp;\r\n}","import React from 'react';\r\nimport './home.css';\r\nimport {getMergeSortAnimations} from './getMergeSortAnimation'\r\n\r\nimport {getBubbleSortAnimations} from './getBubbleSortAnimations'\r\n\r\n\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n//const NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'Blue';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'yellow';\r\n\r\nexport class Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\nresetArray(){\r\n\r\n    const array = [];\r\n    for(let i = 0; i < 200; ++i){\r\n        array.push(randomIntFromInterval(10,300));\r\n    }\r\n    this.setState({array});\r\n}\r\n\r\nquickSort(){\r\n\r\n}\r\nheapSort(){\r\n\r\n}\r\nmergeSort(){\r\n\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar'); \r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //console.log(i);\r\n        setTimeout(() => {\r\n          console.log(\"changig color\");\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          //console.log(\"Cahnging height\");\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n}\r\n\r\nbubbleSort(){\r\n  const animations = getBubbleSortAnimations(this.state.array);\r\n  const arrayLength = animations.length;\r\n  for(let i = 0; i < arrayLength; ++i){\r\n    const [barOneIdx,barTwoIdx,col,barOneHeight,barTwoHeight] = animations[i];\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    const barOne = arrayBars[barOneIdx].style;\r\n    const barTwo = arrayBars[barTwoIdx].style;\r\n    if(col === 0){\r\n      setTimeout(() =>{\r\n        barOne.backgroundColor = SECONDARY_COLOR;\r\n        barTwo.backgroundColor = SECONDARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n      clearTimeout();\r\n    }\r\n    else{\r\n      setTimeout(() => {\r\n        barOne.backgroundColor = PRIMARY_COLOR;\r\n        barTwo.backgroundColor = PRIMARY_COLOR;\r\n        barOne.height = `${barTwoHeight}px`;\r\n        barTwo.height = `${barOneHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n  }\r\n}\r\ntestSortingAlgorithms(){\r\n  // const jsSortedArray = this.state.array.slice().sort((a,b) => a - b);\r\n  // const bubbleSortArray = getBubbleSortAnimations(this.state.array);\r\n  // arraysAreEqual(jsSortedArray,bubbleSortArray);\r\n}\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n        return(\r\n            <div className=\"array-container\">\r\n           {array.map((value,idx) => (\r\n           <div className=\"array-bar\" key={idx}\r\n        style={\r\n            {\r\n                backgroundColor: PRIMARY_COLOR,height: `${value}px`,\r\n                \r\n            }\r\n        }>\r\n              \r\n           </div>\r\n           ))}\r\n           <br/>\r\n           <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        {/* <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button> */}\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        {/* <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  \r\n  // function arraysAreEqual(arrayOne, arrayTwo) {\r\n  //   if (arrayOne.length !== arrayTwo.length) return false;\r\n  //   for (let i = 0; i < arrayOne.length; i++) {\r\n  //     if (arrayOne[i] !== arrayTwo[i]) {\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  //   return true;\r\n  // }\r\n","import React from 'react';\nimport {Home} from './components/home'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}