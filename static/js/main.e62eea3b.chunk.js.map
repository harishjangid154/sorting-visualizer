{"version":3,"sources":["components/getBubbleSortAnimations.js","components/getMertgeSortAnimation.js","components/slide.jsx","components/home.jsx","components/test.jsx","App.js","serviceWorker.js","index.js"],"names":["getBubbleSortAnimations","array","animations","length","mainArray","endIdx","eidx","i","j","push","sweap","bubbleSortHelper","idx1","idx2","temp","CHANGE","merge","mergeSort","arr","min","max","mid","Math","floor","r","l","n1","n2","k","doMerge","Slide","resetArray","useState","value","setValue","type","onChange","document","getElementById","id","Home","props","reset","n","state","console","log","this","ref","random","setState","m","getElementsByTagName","timeout","disabled","s","result","arrBar","getElementsByClassName","current","setTimeout","style","backgroundColor","height","arrayLength","barOneIdx","barTwoIdx","col","barOneHeight","barTwoHeight","arrayBars","barOne","barTwo","clearTimeout","className","map","idx","key","onClick","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e62eea3b.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, array.length - 1, animations);\r\n    return animations;\r\n}\r\nfunction bubbleSortHelper(\r\n    mainArray,\r\n    endIdx,\r\n    animations,\r\n){\r\n    const eidx = endIdx;\r\n    for(let i = 0; i < eidx; ++i){\r\n        for(let j = 0; j < eidx-i; ++j){\r\n            animations.push([j, j+1,0,mainArray[j],mainArray[j+1]]);\r\n            if(mainArray[j] > mainArray[j+1]){\r\n                animations.push([j, j+1,1,mainArray[j],mainArray[j+1]]);\r\n                sweap(mainArray,j,j+1);\r\n            }\r\n            else{\r\n                animations.push([j, j+1,1,mainArray[j+1],mainArray[j]]);\r\n            }\r\n        }   \r\n    }\r\n\r\n}\r\nfunction sweap(\r\n    mainArray,\r\n    idx1,\r\n    idx2\r\n){\r\n    let temp = mainArray[idx1];\r\n    mainArray[idx1] = mainArray[idx2];\r\n    mainArray[idx2] = temp;\r\n}","const CHANGE = [];\r\n\r\n\r\n//Color change to primary = 0;\r\n// color change to secondary = 1\r\n// change in height = 2\r\n\r\n\r\n\r\nexport function merge(array){\r\n\r\n    mergeSort(array,0,array.length-1);   \r\n\r\n    // console.log(CHANGE);\r\n    return [CHANGE,array];\r\n    \r\n\r\n    \r\n    // const arrBar = document.getElementsByClassName(\"array-bar\");\r\n    // // console.log(arrBar.length)\r\n    // for(let i = 0; i < CHANGE.length; i++){\r\n    //     let current = CHANGE[i];\r\n\r\n    //     // console.log(CHANGE[i],i);\r\n    //     if(current[1] == 0){\r\n    //         // console.log(current[0]);\r\n    //         // console.log(CHANGE[i],i);\r\n    //         setTimeout(()=>{\r\n    //             arrBar[current[0]].style.backgroundColor = PRIMARY_COLOR;\r\n    //         },i*ANIMATION_SPEED);\r\n    //     }\r\n    //     else if(current[1] == 1){\r\n            \r\n    //         setTimeout(()=>{\r\n    //             arrBar[current[0]].style.backgroundColor = SECONDARY_COLOR;\r\n    //         },i*ANIMATION_SPEED);\r\n    //     }\r\n    //     else if(current[1] == 2){\r\n            \r\n    //         setTimeout(()=>{\r\n    //             arrBar[current[0]].style.height = `${current[2]}px`;\r\n    //         },i*ANIMATION_SPEED);\r\n    //     }\r\n        \r\n    // }\r\n}\r\n\r\nfunction mergeSort(arr,min,max){\r\n    if(min >= max){\r\n        return;\r\n    }\r\n\r\n    // Calculating mid range to divide array in two part \r\n    const mid = Math.floor((min+max)/2);\r\n\r\n    // recursive call left half\r\n    mergeSort(arr,min,mid);\r\n\r\n    // recursive call for right half\r\n    mergeSort(arr,mid+1,max);\r\n\r\n    // merging sub arrays\r\n    doMerge(arr,min,mid,max);\r\n}\r\n\r\nfunction doMerge(arr,min,mid,max){\r\n\r\n    let r = [];\r\n    let l = [];\r\n\r\n    const n1 = mid-min+1;\r\n    const n2 = max-mid;\r\n    for(let i = 0; i < n1; i++){\r\n        l.push(arr[min+i]);\r\n    }\r\n    for(let i = 0; i < n2; i++){\r\n        r.push(arr[mid+1+i]);\r\n    }\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = min;\r\n\r\n\r\n    // Compair and copy the element in main array in sorted form\r\n\r\n    while(i<n1 && j < n2){\r\n        //TODO: add in a array\r\n\r\n        CHANGE.push([min+i,1]);\r\n        CHANGE.push([mid+j+1,1]);\r\n        if (l[i] <= r[j]) {\r\n\r\n            arr[k] = l[i];\r\n            //TODO: add in a array\r\n\r\n            CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,l[i]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([min+i,0]);\r\n            i++;\r\n        }\r\n        else {\r\n            arr[k] = r[j];\r\n     \r\n            //TODO: add in a array\r\n            CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,r[j]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([mid+j+1,0]);\r\n            j++;\r\n        }\r\n        k++;\r\n        \r\n        \r\n    }\r\n        // Copy the remaining elements of\r\n    // L[], if there are any\r\n    while (i < n1) {\r\n        arr[k] = l[i];\r\n       \r\n        //TODO: add in a array\r\n        CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,l[i]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([min+i,0]);\r\n        i++;\r\n        k++;\r\n    }\r\n \r\n    // Copy the remaining elements of\r\n    // R[], if there are any\r\n    while (j < n2) {\r\n        arr[k] = r[j];\r\n  \r\n        //TODO: add in a array\r\n        CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,r[j]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([mid+j+1,0]);\r\n        j++;\r\n        k++;\r\n    }\r\n    \r\n\r\n \r\n\r\n\r\n}","\r\nimport React, { useState } from 'react';\r\n\r\n\r\n\r\n\r\nexport const Slide = ({resetArray,min,max}) => {\r\n  // console.log(\"This is slide component\", resetArray.);\r\n  const slideChange = () =>{\r\n    setValue(document.getElementById(\"myslide\").value);\r\n    resetArray();\r\n    // resetArray(document.getElementById(\"myslide\").value);\r\n  }\r\n  const [value,setValue] = useState(10);\r\n  return (\r\n    <>\r\n\r\n    <input type=\"range\" value={value} min={min} max={max} onChange={slideChange} id=\"myslide\"></input>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport './home.css';\r\n// import {getMergeSortAnimations} from './getMergeSortAnimation'\r\n\r\nimport {getBubbleSortAnimations} from './getBubbleSortAnimations'\r\n\r\nimport {merge} from './getMertgeSortAnimation';\r\n\r\nimport {Slide} from './slide'\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n//const NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'Blue';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'yellow';\r\n\r\nexport class Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            array: [10,12],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n      console.log(\"Mounted\");\r\n        this.resetArray(10);\r\n    }\r\n\r\nresetArray(ref){\r\n  let n = ref;\r\n    const array = [];\r\n    console.log(\"Reset Array\");\r\n    for(let i = 0; i < n; ++i){\r\n        array.push(randomIntFromInterval(10,300));\r\n    }\r\n    this.setState({array});\r\n}\r\n\r\nreset = () =>{\r\n          let n = document.getElementById(\"myslide\").value;\r\n          this.resetArray(n);\r\n}\r\n\r\nquickSort(){\r\n  \r\n}\r\nheapSort(){\r\n\r\n}\r\nmergeSort(){\r\n\r\n  const m = document.getElementsByTagName(\"button\");\r\n  let timeout = 0;\r\n  for(let i = 0 ; i < m.length; ++i){\r\n    m[i].disabled = true;\r\n  }\r\n  const s = document.getElementById(\"myslide\");\r\n  s.disabled = true;\r\n\r\n  const result = merge(this.state.array);\r\n  const array = result[1];\r\n\r\n  const CHANGE = result[0];\r\n\r\n  const arrBar = document.getElementsByClassName(\"array-bar\");\r\n    \r\n    for(let i = 0; i < CHANGE.length; i++){\r\n        let current = CHANGE[i];\r\n\r\n        \r\n        if(current[1] === 0){\r\n            \r\n            setTimeout(()=>{\r\n                arrBar[current[0]].style.backgroundColor = PRIMARY_COLOR;\r\n            },i*ANIMATION_SPEED_MS);\r\n        }\r\n        else if(current[1] === 1){\r\n            \r\n            setTimeout(()=>{\r\n                arrBar[current[0]].style.backgroundColor = SECONDARY_COLOR;\r\n            },i*ANIMATION_SPEED_MS);\r\n        }\r\n        else if(current[1] === 2){\r\n            \r\n            setTimeout(()=>{\r\n                arrBar[current[0]].style.height = `${current[2]}px`;\r\n            },i*ANIMATION_SPEED_MS);\r\n        }\r\n        timeout = i;\r\n    }\r\n\r\n\r\n  setTimeout(()=>{\r\n    for(let i = 0 ; i < m.length; ++i){\r\n      m[i].disabled = false;\r\n    }\r\n    s.disabled = false;\r\n  }, timeout * ANIMATION_SPEED_MS);\r\n\r\n  this.setState({array});\r\n    // const animations = getMergeSortAnimations(this.state.array);\r\n//     for (let i = 0; i < animations.length; i++) {\r\n//       const arrayBars = document.getElementsByClassName('array-bar'); \r\n//       const isColorChange = i % 3 !== 2;\r\n//       if (isColorChange) {\r\n//         const [barOneIdx, barTwoIdx] = animations[i];\r\n//         const barOneStyle = arrayBars[barOneIdx].style;\r\n//         const barTwoStyle = arrayBars[barTwoIdx].style;\r\n//         const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n//         //console.log(i);\r\n//         setTimeout(() => {\r\n//           // console.log(\"changig color\");\r\n//           barOneStyle.backgroundColor = color;\r\n//           barTwoStyle.backgroundColor = color;\r\n//         }, i * ANIMATION_SPEED_MS);\r\n//       } else {\r\n//         setTimeout(() => {\r\n//           //console.log(\"Cahnging height\");\r\n//           const [barOneIdx, newHeight] = animations[i];\r\n//           const barOneStyle = arrayBars[barOneIdx].style;\r\n//           barOneStyle.height = `${newHeight}px`;\r\n//         }, i * ANIMATION_SPEED_MS);\r\n//       }\r\n//       timeout = i;\r\n//     }\r\n   \r\n//     setTimeout(()=>{\r\n//       for(let i = 0 ; i < m.length; ++i){\r\n//         m[i].disabled = false;\r\n//       }\r\n//       s.disabled = false;\r\n//     }, timeout * ANIMATION_SPEED_MS);\r\n }\r\n\r\nbubbleSort(){\r\n  const m = document.getElementsByTagName(\"button\");\r\n  const s = document.getElementById(\"myslide\");\r\n  for(let i = 0 ; i < m.length; ++i){\r\n    m[i].disabled = true;\r\n  }\r\n  s.disabled = true;\r\n  let timeout = 0;\r\n  const animations = getBubbleSortAnimations(this.state.array);\r\n  const arrayLength = animations.length;\r\n  for(let i = 0; i < arrayLength; ++i){\r\n    const [barOneIdx,barTwoIdx,col,barOneHeight,barTwoHeight] = animations[i];\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    const barOne = arrayBars[barOneIdx].style;\r\n    const barTwo = arrayBars[barTwoIdx].style;\r\n    if(col === 0){\r\n      setTimeout(() =>{\r\n        barOne.backgroundColor = SECONDARY_COLOR;\r\n        barTwo.backgroundColor = SECONDARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n      clearTimeout();\r\n    }\r\n    else{\r\n      setTimeout(() => {\r\n        barOne.backgroundColor = PRIMARY_COLOR;\r\n        barTwo.backgroundColor = PRIMARY_COLOR;\r\n        barOne.height = `${barTwoHeight}px`;\r\n        barTwo.height = `${barOneHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    timeout  = i;\r\n  }\r\n\r\n\r\n  setTimeout(() => {\r\n    for(let i = 0 ; i < m.length; ++i){\r\n      m[i].disabled = false;\r\n    }\r\n    s.disabled = false;\r\n  },timeout*ANIMATION_SPEED_MS);\r\n}\r\ntestSortingAlgorithms(){\r\n  // const jsSortedArray = this.state.array.slice().sort((a,b) => a - b);\r\n  // const bubbleSortArray = getBubbleSortAnimations(this.state.array);\r\n  // arraysAreEqual(jsSortedArray,bubbleSortArray);\r\n}\r\n\r\n\r\n    render(){\r\n        const array = this.state.array;\r\n        console.log(\"This is arrat\" ,array);\r\n        return(\r\n            <div className=\"array-container\">\r\n           {array.map((value,idx) => (\r\n           <div className=\"array-bar\" key={idx}\r\n        style={\r\n            {\r\n                backgroundColor: PRIMARY_COLOR,height: `${value}px`,\r\n                \r\n            }\r\n        }>\r\n              \r\n           </div>\r\n           ))}\r\n           <br/>\r\n           \r\n           <button onClick={() => this.reset()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()} >Merge Sort</button>\r\n        {/* <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button> */}\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <Slide resetArray={this.reset} min=\"10\" max=\"200\"></Slide>\r\n        {/* <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  \r\n  // function arraysAreEqual(arrayOne, arrayTwo) {\r\n  //   if (arrayOne.length !== arrayTwo.length) return false;\r\n  //   for (let i = 0; i < arrayOne.length; i++) {\r\n  //     if (arrayOne[i] !== arrayTwo[i]) {\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  //   return true;\r\n  // }\r\n","import React, { Component } from 'react';\r\nimport './test.css'\r\n\r\n\r\nconst SECONDARY_COLOR = \"blue\";\r\nconst PRIMARY_COLOR = \"red\";\r\nconst CHANGE = [];\r\n\r\n//Color change to primary = 0;\r\n// color change to secondary = 1\r\n// change in height = 2\r\nconst ANIMATION_SPEED = 1\r\n\r\nexport class Test extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            array:[],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        let array = this.state.array;\r\n\r\n        for(let i = 0; i < 200; i++){\r\n            array.push(Math.floor(Math.random() * (100 - 10 + 1) + 10));\r\n        }\r\n\r\n        this.setState({array});\r\n\r\n        // console.log(this.state.array);\r\n    }\r\n\r\n\r\n    merge(){\r\n        // console.log(\"Merge called\");\r\n        let array = this.state.array;\r\n        // const array = [5,6,3,8,9,4]\r\n        // console.log(this.state.array)\r\n        mergeSort(array,0,array.length-1);   \r\n        // console.log(array);     \r\n        // this.setState({array});\r\n        // console.log(CHANGE);\r\n        const arrBar = document.getElementsByClassName(\"array-bar\");\r\n        // console.log(arrBar.length)\r\n        for(let i = 0; i < CHANGE.length; i++){\r\n            let current = CHANGE[i];\r\n\r\n            // console.log(CHANGE[i],i);\r\n            if(current[1] == 0){\r\n                // console.log(current[0]);\r\n                // console.log(CHANGE[i],i);\r\n                setTimeout(()=>{\r\n                    arrBar[current[0]].style.backgroundColor = PRIMARY_COLOR;\r\n                },i*ANIMATION_SPEED);\r\n            }\r\n            else if(current[1] == 1){\r\n                \r\n                setTimeout(()=>{\r\n                    arrBar[current[0]].style.backgroundColor = SECONDARY_COLOR;\r\n                },i*ANIMATION_SPEED);\r\n            }\r\n            else if(current[1] == 2){\r\n                \r\n                setTimeout(()=>{\r\n                    arrBar[current[0]].style.height = `${current[2]}px`;\r\n                },i*ANIMATION_SPEED);\r\n            }\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        let arr = this.state.array;\r\n        return (\r\n\r\n            \r\n            <div>\r\n                <div>\r\n                    {arr.map((value,idx) => (\r\n                        // console.log(idx),\r\n                        <div className=\"array-bar\" key={idx}\r\n                        style={\r\n                            {\r\n                                backgroundColor: 'red',height: `${value}px`,\r\n                                \r\n                            }\r\n                        }>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <button  onClick = {()=>this.merge()}>Merge</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mergeSort(arr,min,max){\r\n    // console.log(\"Inside mergeSort\",arr,min,max);\r\n    if(min >= max){\r\n        return;\r\n    }\r\n    const mid = Math.floor((min+max)/2);\r\n    mergeSort(arr,min,mid);\r\n    mergeSort(arr,mid+1,max);\r\n    doMerge(arr,min,mid,max);\r\n}\r\n\r\nfunction doMerge(arr,min,mid,max){\r\n    // console.log(\"Inside Mege\");\r\n    // const n = document.getElementsByClassName(\"array-bar\");\r\n    let r = [];\r\n    let l = [];\r\n\r\n    const n1 = mid-min+1;\r\n    const n2 = max-mid;\r\n    for(let i = 0; i < n1; i++){\r\n        l.push(arr[min+i]);\r\n    }\r\n    for(let i = 0; i < n2; i++){\r\n        r.push(arr[mid+1+i]);\r\n    }\r\n    // console.log(\"left \", l, \"right \", r);\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = min;\r\n\r\n    while(i<n1 && j < n2){\r\n        // setTimeout(()=>{\r\n        //     n[min+i].style.backgroundColor = SECONDARY_COLOR;\r\n        //     n[mid+1+j].style.backgroundColor = SECONDARY_COLOR;\r\n        // },k*ANIMATION_SPEED);\r\n        //TODO: add in a array\r\n\r\n        CHANGE.push([min+i,1]);\r\n        CHANGE.push([mid+j+1,1]);\r\n        if (l[i] <= r[j]) {\r\n\r\n            arr[k] = l[i];\r\n            // setTimeout(()=>{\r\n            //     n[k].style.backgroundColor = SECONDARY_COLOR;\r\n            // n[k].style.height  = `${l[i]}px`;\r\n            // n[k].style.backgroundColor = PRIMARY_COLOR;\r\n            // n[min+i].style.backgroundColor = PRIMARY_COLOR;\r\n            // },k*ANIMATION_SPEED);\r\n            //TODO: add in a array\r\n\r\n            CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,l[i]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([min+i,0]);\r\n            i++;\r\n        }\r\n        else {\r\n            arr[k] = r[j];\r\n            // setTimeout(()=>{\r\n            //     n[k].style.backgroundColor = SECONDARY_COLOR;\r\n            // n[k].style.height  = `${r[j]}px`;\r\n            // n[k].style.backgroundColor = PRIMARY_COLOR;\r\n            // n[mid+j+1].style.backgroundColor = PRIMARY_COLOR;\r\n            // },k*ANIMATION_SPEED);\r\n            //TODO: add in a array\r\n            CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,r[j]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([mid+j+1,0]);\r\n            j++;\r\n        }\r\n        k++;\r\n        \r\n        \r\n    }\r\n        // Copy the remaining elements of\r\n    // L[], if there are any\r\n    while (i < n1) {\r\n        arr[k] = l[i];\r\n        // setTimeout(()=>{\r\n        //     n[k].style.backgroundColor = SECONDARY_COLOR;\r\n        // n[k].style.height  = `${l[i]}px`;\r\n        // n[k].style.backgroundColor = PRIMARY_COLOR;\r\n        // },k*ANIMATION_SPEED);\r\n        //TODO: add in a array\r\n        CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,l[i]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([min+i,0]);\r\n        i++;\r\n        k++;\r\n    }\r\n \r\n    // Copy the remaining elements of\r\n    // R[], if there are any\r\n    while (j < n2) {\r\n        arr[k] = r[j];\r\n        // setTimeout(()=>{\r\n        //     n[k].style.backgroundColor = SECONDARY_COLOR;\r\n        // n[k].style.height  = `${l[i]}px`;\r\n        // n[k].style.backgroundColor = PRIMARY_COLOR;\r\n        // },k*ANIMATION_SPEED);\r\n        //TODO: add in a array\r\n        CHANGE.push([k,1]);\r\n            CHANGE.push([k,2,r[j]]);\r\n            CHANGE.push([k,0]);\r\n            CHANGE.push([mid+j+1,0]);\r\n        j++;\r\n        k++;\r\n    }\r\n    \r\n\r\n    // console.log(\"array \",arr);\r\n\r\n\r\n}","import React from 'react';\nimport {Home} from './components/home'\nimport {Test} from './components/test'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}