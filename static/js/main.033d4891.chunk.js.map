{"version":3,"sources":["components/getMergeSortAnimation.js","components/getBubbleSortAnimations.js","components/slide.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","eidx","sweap","bubbleSortHelper","idx1","idx2","temp","Slide","resetArray","useState","value","setValue","type","min","max","onChange","document","getElementById","id","Home","props","reset","n","state","console","log","this","ref","random","setState","m","getElementsByTagName","timeout","disabled","s","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","arrayLength","col","barOneHeight","barTwoHeight","barOne","barTwo","clearTimeout","className","map","idx","key","onClick","mergeSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.033d4891.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  ","export function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, array.length - 1, animations);\r\n    return animations;\r\n}\r\nfunction bubbleSortHelper(\r\n    mainArray,\r\n    endIdx,\r\n    animations,\r\n){\r\n    const eidx = endIdx;\r\n    for(let i = 0; i < eidx; ++i){\r\n        for(let j = 0; j < eidx-i; ++j){\r\n            animations.push([j, j+1,0,mainArray[j],mainArray[j+1]]);\r\n            if(mainArray[j] > mainArray[j+1]){\r\n                animations.push([j, j+1,1,mainArray[j],mainArray[j+1]]);\r\n                sweap(mainArray,j,j+1);\r\n            }\r\n            else{\r\n                animations.push([j, j+1,1,mainArray[j+1],mainArray[j]]);\r\n            }\r\n        }   \r\n    }\r\n\r\n}\r\nfunction sweap(\r\n    mainArray,\r\n    idx1,\r\n    idx2\r\n){\r\n    let temp = mainArray[idx1];\r\n    mainArray[idx1] = mainArray[idx2];\r\n    mainArray[idx2] = temp;\r\n}","\r\nimport React, { useState } from 'react';\r\n\r\n\r\n\r\n\r\nexport const Slide = ({resetArray}) => {\r\n  // console.log(\"This is slide component\", resetArray.);\r\n  const slideChange = () =>{\r\n    setValue(document.getElementById(\"myslide\").value);\r\n    resetArray();\r\n    // resetArray(document.getElementById(\"myslide\").value);\r\n  }\r\n  const [value,setValue] = useState(10);\r\n  return (\r\n    <>\r\n\r\n    <input type=\"range\" value={value} min=\"10\" max=\"200\" onChange={slideChange} id=\"myslide\"></input>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport './home.css';\r\nimport {getMergeSortAnimations} from './getMergeSortAnimation'\r\n\r\nimport {getBubbleSortAnimations} from './getBubbleSortAnimations'\r\n\r\nimport {Slide} from './slide'\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n//const NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'Blue';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'yellow';\r\n\r\nexport class Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            array: [10,12],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n      console.log(\"Mounted\");\r\n        this.resetArray(10);\r\n    }\r\n\r\nresetArray(ref){\r\n  let n = ref;\r\n    const array = [];\r\n    console.log(\"Reset Array\");\r\n    for(let i = 0; i < n; ++i){\r\n        array.push(randomIntFromInterval(10,300));\r\n    }\r\n    this.setState({array});\r\n}\r\n\r\nreset = () =>{\r\n          let n = document.getElementById(\"myslide\").value;\r\n          this.resetArray(n);\r\n}\r\n\r\nquickSort(){\r\n\r\n}\r\nheapSort(){\r\n\r\n}\r\nmergeSort(){\r\n\r\n  const m = document.getElementsByTagName(\"button\");\r\n  let timeout = 0;\r\n  for(let i = 0 ; i < m.length; ++i){\r\n    m[i].disabled = true;\r\n  }\r\n  const s = document.getElementById(\"myslide\");\r\n  s.disabled = true;\r\n\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar'); \r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        //console.log(i);\r\n        setTimeout(() => {\r\n          // console.log(\"changig color\");\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          //console.log(\"Cahnging height\");\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n      timeout = i;\r\n    }\r\n   \r\n    setTimeout(()=>{\r\n      for(let i = 0 ; i < m.length; ++i){\r\n        m[i].disabled = false;\r\n      }\r\n      s.disabled = false;\r\n    }, timeout * ANIMATION_SPEED_MS);\r\n}\r\n\r\nbubbleSort(){\r\n  const m = document.getElementsByTagName(\"button\");\r\n  const s = document.getElementById(\"myslide\");\r\n  for(let i = 0 ; i < m.length; ++i){\r\n    m[i].disabled = true;\r\n  }\r\n  s.disabled = true;\r\n  let timeout = 0;\r\n  const animations = getBubbleSortAnimations(this.state.array);\r\n  const arrayLength = animations.length;\r\n  for(let i = 0; i < arrayLength; ++i){\r\n    const [barOneIdx,barTwoIdx,col,barOneHeight,barTwoHeight] = animations[i];\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    const barOne = arrayBars[barOneIdx].style;\r\n    const barTwo = arrayBars[barTwoIdx].style;\r\n    if(col === 0){\r\n      setTimeout(() =>{\r\n        barOne.backgroundColor = SECONDARY_COLOR;\r\n        barTwo.backgroundColor = SECONDARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n      clearTimeout();\r\n    }\r\n    else{\r\n      setTimeout(() => {\r\n        barOne.backgroundColor = PRIMARY_COLOR;\r\n        barTwo.backgroundColor = PRIMARY_COLOR;\r\n        barOne.height = `${barTwoHeight}px`;\r\n        barTwo.height = `${barOneHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    timeout  = i;\r\n  }\r\n  setTimeout(()=>{\r\n    for(let i = 0 ; i < m.length; ++i){\r\n      m[i].disabled = false;\r\n    }\r\n    s.disabled = false;\r\n  }, timeout * ANIMATION_SPEED_MS);\r\n}\r\ntestSortingAlgorithms(){\r\n  // const jsSortedArray = this.state.array.slice().sort((a,b) => a - b);\r\n  // const bubbleSortArray = getBubbleSortAnimations(this.state.array);\r\n  // arraysAreEqual(jsSortedArray,bubbleSortArray);\r\n}\r\n\r\n\r\n    render(){\r\n        const array = this.state.array;\r\n        console.log(\"This is arrat\" ,array);\r\n        return(\r\n            <div className=\"array-container\">\r\n           {array.map((value,idx) => (\r\n           <div className=\"array-bar\" key={idx}\r\n        style={\r\n            {\r\n                backgroundColor: PRIMARY_COLOR,height: `${value}px`,\r\n                \r\n            }\r\n        }>\r\n              \r\n           </div>\r\n           ))}\r\n           <br/>\r\n           \r\n           <button onClick={() => this.reset()}>Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()} >Merge Sort</button>\r\n        {/* <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button> */}\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <Slide resetArray={this.reset}></Slide>\r\n        {/* <button onClick={() => this.testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  \r\n  // function arraysAreEqual(arrayOne, arrayTwo) {\r\n  //   if (arrayOne.length !== arrayTwo.length) return false;\r\n  //   for (let i = 0; i < arrayOne.length; i++) {\r\n  //     if (arrayOne[i] !== arrayTwo[i]) {\r\n  //       return false;\r\n  //     }\r\n  //   }\r\n  //   return true;\r\n  // }\r\n","import React from 'react';\nimport {Home} from './components/home'\n// import {Test} from './components/test'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}